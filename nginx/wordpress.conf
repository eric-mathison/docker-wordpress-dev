##
# FastCGI Cache Settings
##

fastcgi_cache_path /var/cache/nginxfastcgi levels=1:2 keys_zone=fastcgicache:100m inactive=60m;
fastcgi_cache_key "$scheme$request_method$host$request_uri";
fastcgi_cache_use_stale updating error timeout invalid_header http_500;
fastcgi_ignore_headers Cache-Control Expires Set-Cookie;

##
# Buffer Overflow Protection
##

client_max_body_size 100m;
client_body_buffer_size 100K;
client_header_buffer_size 2k;
large_client_header_buffers 4 8k;

server {
    listen 80;
    server_name dev.localhost;

    root /var/www/html;
    index index.php;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    ####
    # Server Side Rewrites
    ####
    
    set $skip_cache 0;
   
    # POST requests and urls with a query string should always go to PHP
    if ($request_method = POST) {
 	set $skip_cache 1;
    }

    if ($query_string != "") {
	set $skip_cache 1;
    }

    # Don't cache uris containing the following segments
    if ($request_uri ~* "opcache.php|/status/|/wp-admin/|/wp-login.php|/wp-content/uploads/dlm_uploads/|/xmlrpc.php|.*.log|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml|/shop.*|/cart.*|/my-account.*|/checkout.*|/affiliate-.*") {
        set $skip_cache 1;
    }

    # Don't use the cache for logged in users or recent commenter
    if ($http_cookie ~* "comment_author|wp-postpass|wordpress_no_cache|wordpress_admin_logged_in") {
        set $skip_cache 1;
    }

    # Global FastCGI Settings
    fastcgi_split_path_info ^(.+\.php)(/.+)$;
    fastcgi_cache_bypass $skip_cache;
    fastcgi_no_cache $skip_cache;
    fastcgi_cache fastcgicache;
    fastcgi_cache_valid 60m;
    fastcgi_cache_valid 200 301 302 404 1m;
    fastcgi_buffers 16 16k; 
    fastcgi_buffer_size 32k;

    fastcgi_pass_header Set-Cookie;
    fastcgi_pass_header Cookie;

    fastcgi_intercept_errors on;
    fastcgi_index index.php;
    fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
    include fastcgi_params;


    ##
    # Exploit Settings
    ##
	
    # Block SQL injections
    set $block_sql_injections 0;
    if ($query_string ~ "union.*select.*\(") {
        set $block_sql_injections 1;
    }
    if ($query_string ~ "union.*all.*select.*") {
        set $block_sql_injections 1;
    }
    if ($query_string ~ "concat.*\(") {
        set $block_sql_injections 1;
    }
    if ($block_sql_injections = 1) {
        return 403;
    }

    # Block file injections
    set $block_file_injections 0;
    if ($query_string ~ "[a-zA-Z0-9_]=http://") {
        set $block_file_injections 1;
    }
    if ($query_string ~ "[a-zA-Z0-9_]=(\.\.//?)+") {
        set $block_file_injections 1;
    }
    if ($query_string ~ "[a-zA-Z0-9_]=/([a-z0-9_.]//?)+") {
        set $block_file_injections 1;
    }
    if ($block_file_injections = 1) {
        return 403;
    }

    # Block common exploits
    set $block_common_exploits 0;
    if ($query_string ~ "(<|%3C).*script.*(>|%3E)") {
        set $block_common_exploits 1;
    }
    if ($query_string ~ "GLOBALS(=|\[|\%[0-9A-Z]{0,2})") {
        set $block_common_exploits 1;
    }
    if ($query_string ~ "_REQUEST(=|\[|\%[0-9A-Z]{0,2})") {
        set $block_common_exploits 1;
    }
    if ($query_string ~ "proc/self/environ") {
        set $block_common_exploits 1;
    }
    if ($query_string ~ "mosConfig_[a-zA-Z_]{1,21}(=|\%3D)") {
        set $block_common_exploits 1;
    }
    if ($query_string ~ "base64_(en|de)code\(.*\)") {
        set $block_common_exploits 1;
    }
    if ($block_common_exploits = 1) {
        return 403;
    }

    # Common bandwidth hoggers and hacking tools.
    if ($http_user_agent ~ "libwww-perl") {
        set $block_user_agents 1;
    }
    if ($http_user_agent ~ "GetRight") {
        set $block_user_agents 1;
    }
    if ($http_user_agent ~ "GetWeb!") {
        set $block_user_agents 1;
    }
    if ($http_user_agent ~ "Go!Zilla") {
        set $block_user_agents 1;
    }
    if ($http_user_agent ~ "Download Demon") {
        set $block_user_agents 1;
    }
    if ($http_user_agent ~ "Go-Ahead-Got-It") {
        set $block_user_agents 1;
    }
    if ($http_user_agent ~ "TurnitinBot") {
        set $block_user_agents 1;
    }
    if ($http_user_agent ~ "GrabNet") {
        set $block_user_agents 1;
    }

    if ($block_user_agents = 1) {
        return 403;
    }

    location / {
        try_files $uri $uri/ /index.php?$args; 
	    rewrite ^/sitemap_index.xml$ /index.php?sitemap=1 last;
	    rewrite ^/([^/]+?)-sitemap([0-9]+)?.xml$ /index.php?sitemap=$1&sitemap_n=$2 last;

    }

    location ~ /amp/$ {
	    rewrite ^(.*/)amp/$ $1 permanent;
    }

    location ~* /akismet/.*\.php$ {
        allow 127.0.0.1;
        deny all;
        fastcgi_pass wordpress:9000;
    }

    location ~* /tinymce/.*\.php$ {
        allow 127.0.0.1;
        fastcgi_pass wordpress:9000;
    }

    location ~* /(?:uploads|files|wp-content|wp-includes)/.*\.php$ {
        deny all;
        fastcgi_pass wordpress:9000;
    }

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_pass wordpress:9000;
    }

    location ~* \.(jpg|jpeg|png|gif|ico)$ {
        expires 1y;
        access_log off;
    	log_not_found off;
    }

    location ~* /wp-content/uploads/woocommerce_uploads/ {
	    internal;
    }

    location ~* /wp-content/uploads/dlm_uploads/ {
        internal;
    }

    location = /robots.txt {
        allow all;
        access_log off;
        log_not_found off;
    }

    location ~ /\.(css|rss)$ {
        allow all;
        access_log off;
        log_not_found off;
    }

    location ~ /.well-known {
	    allow all;
    }

    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
}